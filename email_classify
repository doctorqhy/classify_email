#coding=utf-8
from Bayes.bayes import *
import re
import random


def textParse(bigString):

    reg = re.split(r'\W*',bigString)
    #listOfTokens = reg.split(str(reg))
    return [tok.lower() for tok in reg if len(tok) > 2]

def spamTest(number):

    docList = []
    classList = []
    fullText = []
    for i in range(1,26):
        wordList = textParse(open(r'C:\Users\Qhy\Desktop\spam\%d.txt' % i,'rb').read().decode('gb18030','ignore'))
        docList.append(wordList)
        fullText.extend(wordList)
        classList.append(1)
        wordList_1 = textParse(open(r'C:\Users\Qhy\Desktop\ham\%d.txt'% i,'rb').read().decode('gb18030','ignore'))
        docList.append(wordList_1)
        fullText.extend(wordList_1)
        classList.append(0)

    vocabList = createVocabList(docList)
    trainingSet = list(range(50))
    testSet = []
    for i in range(number):
        randIndex = int(random.uniform(0,len(trainingSet)))
        testSet.append(trainingSet[randIndex])
        del(trainingSet[randIndex])

    trainMat = []
    trainClasses = []
    for docIndex in trainingSet:
        trainMat.append(bagOfWordVac(vocabList,docList[docIndex]))
        trainClasses.append(classList[docIndex])
    p1V,p0V,pAb = trainNB0(trainMat,trainClasses)

    errorCount = 0
    for docIndex in testSet:
        wordVector = bagOfWordVac(vocabList,docList[docIndex])

        if classifyNB(array(wordVector),p0V,p1V,pAb) != classList[docIndex]:
            errorCount += 1


    a = (float(errorCount)/len(testSet))*100
    return ('%.2f'%a)
#spamTest()

def spamTest_1(str):

    docList = []
    classList = []
    fullText = []
    for i in range(1,26):
        wordList = textParse(open(r'C:\Users\Qhy\Desktop\spam\%d.txt'%i ,'rb').read().decode('gb18030','ignore'))
        docList.append(wordList)
        fullText.extend(wordList)
        classList.append(1)
        wordList_1 = textParse(open(r'C:\Users\Qhy\Desktop\ham\%d.txt'%i,'rb').read().decode('gb18030','ignore'))
        docList.append(wordList_1)
        fullText.extend(wordList_1)
        classList.append(0)

    #创建一个向量保存所有不重复字符
    vocabList = createVocabList(docList)
    trainingSet = list(range(50))

    trainMat = []
    trainClasses = []
    for docIndex in trainingSet:
        trainMat.append(bagOfWordVac(vocabList,docList[docIndex]))
        trainClasses.append(classList[docIndex])
    p1V,p0V,pAb = trainNB0(trainMat,trainClasses)

    testStr = textParse(str)
    testStr_1 = array(setOfWordVac(vocabList,testStr))

    number = classifyNB(testStr_1,p0V,p1V,pAb)def createVocabList(dataset):

    vocabSet = set([])

    #得到训练集中出现的单词，不重复
    for document in dataset:
        #求集合的并集
        vocabSet = vocabSet | set(document)

    return list(vocabSet)

postingList,va = loadDataSet()
a = createVocabList(postingList)


#贝叶斯的词集模型
def setOfWordVac(dataset,inputset):

    returnVec = [0] * len(dataset)
    #将输入的数据转化为数值，如果该单词出现，则对应位置变为1，否则为0
    for word in inputset:

        if word in dataset:

            returnVec[dataset.index(word)] = 1

    return returnVec

def bagOfWordVac(dataset,inputset):

    returnVec = [0] * len(dataset)

    for word in inputset:

        if word in dataset:
            returnVec[dataset.index(word)] += 1

    return returnVec

def trainNB0(trainMatrix,trainCategory):

    numTrainDocs = len(trainMatrix)
    numWords = len(trainMatrix[0])
    #分类为1的概率
    pAbusive = sum(trainCategory) / float(numTrainDocs)
    p0Num = ones(numWords)
    p1Num = ones(numWords)
    p0Denom = 2.0
    p1Denom = 2.0

    for i in range(numTrainDocs):

        if trainCategory[i] == 1:

            p1Num += trainMatrix[i]
            p1Denom += sum(trainMatrix[i])

        else:

            p0Num += trainMatrix[i]
            p0Denom += sum(trainMatrix[i])
    #每个单词属于第一类的概率
    p1Vect = log(p1Num / p1Denom)
    #每个单词属于第二类的概率
    p0Vect = log(p0Num / p0Denom)

    return p1Vect,p0Vect,pAbusive


def classifyNB(vecClassify,p0Vec,p1Vec,pClass):


    p1 = sum(vecClassify * p1Vec) + log(pClass)
    p0 = sum(vecClassify * p0Vec) + log(1.0 - pClass)

    if p1 > p0:
        return 1
    else:
        return 0
 class top(object):

    def __init__(self):
        self.tk = Tk()
        self.tk.title('垃圾邮件分类')
        self.tk.geometry('300x150')

        self.frame_1 = Frame(self.tk)
        self.frame_2 = Frame(self.tk)
        self.frame_3 = Frame(self.tk)

        self.label = Label(self.frame_1,text = '正确率验证',font='Helvetica -18 bold')
        self.label.pack()
        self.label_1 = Label(self.frame_1)
        self.label_1.pack()
        self.frame_1.pack()
        self.v = IntVar()
        self.label = Label(self.frame_2,text = '输入测试集个数:',font='Helvetica -18 bold')
        self.ct = Entry(self.frame_2,width = 2,textvariable=self.v,font='Helvetica -18 bold')
        self.button = Button(self.frame_2,text = '确定',font='Helvetica -14 bold',command = self.classify)
        self.label.pack(side = LEFT)
        self.ct.pack(side = LEFT)
        self.button.pack(side = LEFT)
        self.frame_2.pack()
        self.label_2 = Label(self.frame_3,text = '错误率:',font='Helvetica -18 bold')
        self.text = Text(self.frame_3,height = 1,width = 4,font='Helvetica -18 bold')
        self.label_3 = Label(self.frame_3,text = '%',font='Helvetica -18 bold')
        self.label_2.pack(side = LEFT)
        self.text.pack(side = LEFT)
        self.label_3.pack(side = LEFT)
        self.frame_3.pack()

        self.menubar = Menu(self.tk)
        self.menubar.add_command(label = '分类',command=top_classify)
        self.tk.config(menu = self.menubar)
    def classify(self):

        a = self.v.get()
        if a != 0:
            errorRate = spamTest(a)
            self.text.delete('0.0',END)
            self.text.insert(END,errorRate)




class top_classify():

    def __init__(self):
        self.tk = Toplevel()
        self.tk.title('垃圾邮件分类')
        self.tk.geometry('300x200')

        self.frame_1 = Frame(self.tk)
        self.frame_2 = Frame(self.tk)
        self.frame_3 = Frame(self.tk)

        self.label_1 = Label(self.frame_1,text = '邮件分类',font='Helvetica -18 bold')
        self.label = Label(self.frame_1)
        self.label_1.pack()
        self.label.pack()
        self.frame_1.pack()

        self.label_2 = Label(self.frame_2,text = '输入邮件:',font='Helvetica -18 bold')
        self.text_1 = ScrolledText(self.frame_2,height = 5,width = 13,font='Helvetica -18 bold')
        self.button = Button(self.frame_2,text = '确定',font='Helvetica -18 bold',command = self.classify)
        self.label_2.pack(side = LEFT)
        self.text_1.pack(side = LEFT)
        self.button.pack(side = LEFT)
        self.frame_2.pack()

        self.label_3 = Label(self.frame_3,text = '所属类别为:',font='Helvetica -18 bold')
        self.text_2 = Text(self.frame_3,height = 1,width = 8,font='Helvetica -18 bold')
        self.label_3.pack(side = LEFT)
        self.text_2.pack(side = LEFT)
        self.frame_3.pack()

    def classify(self):

        str = self.text_1.get('0.0',END).replace('\n','')
        number = spamTest_1(str)

        if number == 0:

            self.text_2.delete('0.0',END)
            self.text_2.insert(END,'正常邮件')

        else:

            self.text_2.delete('0.0', END)
            self.text_2.insert(END,'垃圾邮件')


def main():
    d = top()
    mainloop()

if __name__ == '__main__':
    main()


    return number
