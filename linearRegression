from numpy import *


#从文件中读入数据
def loadDataSet(filename):

    #得到特征值个数
    numFeat = len(open(filename).readline().split('\t')) - 1
    dataMat = []
    labelMat = []
    fr = open(filename,encoding='utf8')

    for line in fr.readlines():

        lineArr = []
        curLine = line.strip().split('\t')

        for i in range(numFeat):

            lineArr.append(float(curLine[i]))

        dataMat.append(lineArr)
        labelMat.append(float(curLine[-1]))

    return dataMat,labelMat


#标准线性回归
def standRegres(xArr,yArr):

    xMat = mat(xArr)
    yMat = mat(yArr).T
    xTx = xMat.T * xMat

    if linalg.det(xTx) == 0.0:

        return

    #通过最小二乘法得到最优的回归系数
    ws = xTx.I * (xMat.T * yMat)

    return ws

filename = r'C:\Users\Qhy\Desktop\abalone.txt'


#局部加权线性回归
def lwlr(testPoint,xArr,yArr,k = 1.0):

    xMat = mat(xArr)
    yMat = mat(yArr).T
    m = shape(xMat)[0]
    weights = mat(eye(m))

    #权重指数以指数级衰减
    for j in range(m):

        diffMat = testPoint - xMat[j,:]
        weights[j,j] = exp(diffMat * diffMat.T / (-2 * k**2))

    xTx = xMat.T * (weights * xMat)

    if linalg.det(xTx) == 0.0:

        return

    #局部加权回归方程
    ws = xTx.I * (xMat.T * (weights * yMat))

    #得到测试点回归以后的值
    return testPoint * ws


#局部加权线性回归的测试
def lwlrTest(testArr,xArr,yArr,k = 1.0):

    m = shape(testArr)[0]
    yHat = zeros(m)

    for i in range(m):

        yHat[i] = lwlr(testArr[i],xArr,yArr,k)

    return yHat

xArr,yArr = loadDataSet(filename)
a = lwlrTest(xArr[0:99],xArr[0:99],yArr[0:99],1.0)
print(a)


#岭回归
def ridgeRegres(xMat,yMat,lam = 0.2):
    xTx = xMat.T * xMat
    denom = xTx + eye(shape(xMat)[0]) * lam
    if linalg.det(denom) == 0.0:
        return

    #岭回归方程
    ws = denom.I * (xMat.T * yMat)
    return ws


#岭回归测试
def ridgeTest(xArr,yArr):
    xMat = mat(xArr)
    yMat = mat(yArr).T
    yMean = mean(yMat,0)
    yMat = yMat - yMean
    xMeans = mean(xMat,0)
    xVar = var(xMat,0)
    xMat = (xMat - xMeans) / xVar
    numTestPts = 30
    wMat = zeros((numTestPts,shape(xMat)[1]))
    for i in range(numTestPts):
        ws = ridgeRegres(xMat,yMat,exp(i-10))
        wMat[i,:] = ws.T
    return wMat


#得到误差的平方和
def rssError(yArr,yHatArr):

    return ((yArr - yHatArr)**2).sum()


#对数据标准化
#数据减去均值除以方差
def regularize(xArr):
    xMat = mat(xArr)
    xMean = mean(xMat,0)
    xVar = var(xMat,0)
    xMat = xMat - xMean
    xData = xMat / xVar
    return xData


#前向逐步回归
def stageWise(xArr,yArr,eps = 0.01,numIt = 100):

    xMat = mat(xArr)
    yMat = mat(yArr).T
    yMean = mean(yMat,0)
    yMat = yMat - yMean
    xMat = regularize(xMat)
    m,n = shape(xMat)
    returnMat = zeros((numIt,n))
    #初始化回归系数为0
    ws = zeros((n,1))
    wsTest = ws.copy()
    wsMax = ws.copy()

    #使用贪心法前向回归
    for i in range(numIt):

        print(ws.T)
        lowestError = inf

        for j in range(n):

            for sign in [-1,1]:

                wsTest = ws.copy()
                wsTest[j] = eps*sign
                #得到预测值
                yTest = xMat*wsTest
                #求平方误差
                rssE = rssError(yMat.A,yTest.A)

                #找出最小的平方误差对应的回归系数
                if rssE < lowestError:

                    lowestError = rssE
                    wsMax = wsTest

        ws = wsMax.copy()
        returnMat[i,:] = ws.T

    return returnMat
