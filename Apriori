def loadDataSet():

    return [[1,3,4],[2,3,5],[1,2,3,5],[2,5]]


#得到长度为1的候选项集
def createC1(dataset):

    C1 = []
    for transaction in dataset:

        for item in transaction:

            if not [item] in C1:

                C1.append([item])

    C1.sort()

    #将长度为1的项映射成为frozenset类型使得它可以作为dict的键
    return map(frozenset,C1)


#将map对象转化为列表
def maptoList(dataset):

    list = []
    for data in dataset:

        list.append(data)

    return list


#得到符合要求的频繁项集
def scanD(D,Ck,minSupport):

    ssCnt = {}
    numItems = 0
    #Ck是一个map对象，使用前先将它转化为一个列表
    list = maptoList(Ck)

    #ssCnt的键为项集，值为项集出现的次数
    for tid in D:

        numItems += 1
        for can in list:

            #如果候选项集中所有元素出现在某一记录中，则使它的支持度加1
            if can.issubset(tid):

                if can not in ssCnt.keys():

                    ssCnt[can] = 1

                else:

                    ssCnt[can] += 1

    retList = []
    supportData = {}

    #得到满足可支持度的项集的集合，并且保存每个项集的可支持度
    for key in ssCnt.keys():

        support = ssCnt[key] / numItems

        if support >= minSupport:

            retList.append(key)

        supportData[key] = support

    return retList,supportData


#得到frozenset对象里面的值
def getFrozenset(data):

    list = []

    for i in data:

        list.append(i)

    return list


#得到长度为k的频繁项集
def aprioriGen(Lk,k):

    retList = []
    #将map对象转化为列表
    list1 = maptoList(Lk)
    lenLk = len(list1)

    for i in range(lenLk):

        for j in range(i+1,lenLk):

            L1 = getFrozenset(list1[i])[:k-2]
            L2 = getFrozenset(list1[j])[:k-2]

            #如果两个集合前k-2个元素相同则合并
            if L1 == L2:

                retList.append(list1[i] | list1[j])

    return retList


#得到频繁项集
def apriori(dataset,minSupport = 0.5):

    #首先创建长度为1的候选项集
    C1 = createC1(dataset)
    D = map(set,dataset)
    #得到频繁项集
    L1,supportData = scanD(D,C1,minSupport)
    L = [L1]
    k = 2

    #当频繁项集不为空时重复进行，得到不同长度的频繁项集
    while(len(L[k-2]) > 0):

        #得到长度为2的候选项集
        Ck = aprioriGen(L[k-2],k)
        D = map(set,dataset)
        #得到频繁项集
        Lk,supK = scanD(D,Ck,minSupport)
        #更新可支持度字典
        supportData.update(supK)
        #将得到的不同长度的频繁项集保存到列表
        L.append(Lk)
        k += 1

    return L,supportData


def generateRules(L,supportData,minConf = 0.7):

    #存储关联规则
    bigRuleList = []

    #遍历长度大于1的频繁项集集合
    for i in range(1,len(L)):

        #将每一个频繁项集分解
        for freqSet in L[i]:

            H1 = [frozenset([item]) for item in freqSet]
            if (i > 1):

                rulesFromConseq(freqSet,H1,supportData,bigRuleList,minConf)

            else:

                calcConf(freqSet,H1,supportData,bigRuleList,minConf)

    return bigRuleList

def calcConf(freqSet,H,supportData,br1,minConf = 0.7):

    prunedH = []

    for conseq in H:

        #计算可信度，得到符合要求的关联规则
        conf = supportData[freqSet] / supportData[freqSet - conseq]

        if conf >= minConf:

            print(freqSet-conseq,'--->',conseq,'conf:',conf)
            #将关联规则保存
            br1.append((freqSet-conseq,conseq,conf))
            prunedH.append(conseq)

    return prunedH


def rulesFromConseq(freqSet,H,supportData,br1,minConf = 0.7):

    m = len(H[0])
    if (len(freqSet) > (m + 1)):

        #合并，得到超集
        Hmp1 = aprioriGen(H,m + 1)
        Hmp1 = calcConf(freqSet,Hmp1,supportData,br1,minConf)

        #判断是否需要继续合并
        if (len(Hmp1) > 1):

            rulesFromConseq(freqSet,Hmp1,supportData,br1,minConf)

data = loadDataSet()
a,b = apriori(data)

d = generateRules(a,b,minConf=0.5)

print(d)
